# IMS and ADiff separated by observer
ggplot(pdpStand2, aes(IMS, ADiff, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/ADiff") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. ADiff estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
lm(IMS ~ ADiff*Observer, data = pdpStand2[pdpStand2$Task = "WIT"]) %>%
summary()
head(pdpStand2)
class(pdpStand2$Subject)
pdpStand2$Subject = factor(pdpStand2$Subject)
class(pdpStand2$Subject)
class(pdpStand2$Observer)
class(pdpStand2$MeanC)
class(pdpStand2$ADiff)
class(pdpStand2$AResid)
pdpStand2$MeanC = as.numeric(pdpStand2$MeanC)
pdpStand2$ADiff = as.numeric(pdpStand2$ADiff)
pdpStand2$AResid = as.numeric(pdpStand2$AResid)
class(pdpStand2$AResid)
class(pdpStand2$Task)
class(pdpStand2$IMS)
class(pdpStand2$EMS)
pdpStand2$Task = factor(pdpStand2$Task)
unique(pdpStand2$Subject)
pdpStand2$Subject = factor(pdpStand2$Subject)
pdpStand2$MeanC = as.numeric(pdpStand2$MeanC)
pdpStand2$ADiff = as.numeric(pdpStand2$ADiff)
pdpStand2$AResid = as.numeric(pdpStand2$AResid)
pdpStand2$Task = factor(pdpStand2$Task)
ggplot(pdpStand2, aes(IMS, ADiff, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/ADiff") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. ADiff estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
lm(IMS ~ ADiff*Observer, data = pdpStand2[pdpStand2$Task = "WIT"]) %>%
summary()
pdpStand2[pdpStand2$Task = "WIT",]
pdpStand2[pdpStand2$Task == "WIT",]
lm(IMS ~ ADiff*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
lm(ADiff ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
lm(ADiff ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "AP",]) %>%
summary()
lm(ADiff ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
lm(ADiff ~ IMS, data = wideWIT[wideWIT$Observer == "Present" &
pdpStand2$Task == "WIT",]) %>%
summary()
lm(ADiff ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "WIT",]) %>%
summary()
lm(ADiff ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "AP",]) %>%
summary()
ggplot(pdpStand2, aes(IMS, AResid, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/AResid") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
lm(AResid ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
lm(AResid ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "AP",]) %>%
summary()
lm(AResid ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "WIT",]) %>% summary()
lm(AResid ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "AP",]) %>% summary()
lm(ADiff ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "WIT",]) %>% summary()
# IMS and MeanC separated by observer
ggplot(pdpStand2, aes(IMS, MeanC, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/MeanC") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. MeanC estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
lm(MeanC ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
## AP
lm(MeanC ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "AP",]) %>%
summary()
lm(MeanC ~ IMS, data = pdpStand2[pdpStand2$Observer == "Absent" &
pdpStand2$Task == "AP",]) %>% summary()
ggplot(pdpStand2, aes(EMS, ADiff, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/ADiff") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. ADiff estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
ggplot(pdpStand2, aes(IMS, ADiff, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/ADiff") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. ADiff estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
ggplot(pdpStand2, aes(EMS, AResid, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/AResid") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
ggplot(pdpStand2, aes(IMS, AResid, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/AResid") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
bsWIT = read.delim("badSubsWIT.txt")
bsAP = read.delim("badSubsAP.txt")
datWIT = wideWIT[!(wideWIT$Subject %in% bsAP$Subject),]
datAP = wideAP[!(wideAP$Subject %in% bsWIT$Subject),]
datBoth = left_join(datWIT, datAP, by= "Subject") %>%
rename(WIT_BlackA = Black_A.x,
WIT_BlackC = Black_C.x,
AP_BlackA = Black_A.y,
AP_BlackC = Black_C.y,
WIT_TotalA = Total_A.x,
WIT_TotalC = Total_C.x,
AP_TotalA = Total_A.y,
AP_TotalC = Total_C.y,
Observer = Observer.x,
IMS = IMS.x,
EMS = EMS.x) %>%
select(Subject, Observer, IMS, EMS,
WIT_BlackA, WIT_BlackC, AP_BlackA, AP_BlackC,
WIT_TotalA, WIT_TotalC, AP_TotalA, AP_TotalC
)
# make into long form
longDat = datBoth %>%
gather(Type, value, 5:12) # Subject is what you organize by, Estimate is new column that you create
# 1:4 selects columns that you want to gather into Estimate column
# separate by estimate
longDat$Estimate = NA
longDat$Estimate[grep("BlackA", longDat$Type)] = "Black_A"
longDat$Estimate[grep("BlackC", longDat$Type)] = "Black_C"
longDat$Estimate[grep("TotalA", longDat$Type)] = "Total_A"
longDat$Estimate[grep("TotalC", longDat$Type)] = "Total_C"
longDat$Task = NA
longDat$Task[grep("WIT", longDat$Type)] = "WIT"
longDat$Task[grep("AP", longDat$Type)] = "AP"
head(pdpStand2)
lm(AResid ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "AP",]) %>% summary()
lm(AResid ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" &
pdpStand2$Task == "WIT",]) %>% summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, ADiff, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. ADiff estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(ADiff ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. AResid estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(AResid ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, MeanC, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. MeanC estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(MeanC ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2, aes(IMS, MeanC, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/MeanC") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. MeanC estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
ggplot(pdpStand2, aes(IMS, ADiff, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/ADiff") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. ADiff estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
lm(ADiff ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "AP",]) %>%
summary()
lm(ADiff ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, ADiff, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. ADiff estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(ADiff ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, MeanC, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. MeanC estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(MeanC ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2, aes(IMS, AResid, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/AResid") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
lm(AResid ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
lm(AResid ~ IMS*Observer, data = pdpStand2[pdpStand2$Task == "AP",]) %>%
summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, ADiff, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. ADiff estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(ADiff ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2[pdpStand2$Observer == "Present",],
aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present condition") +
labs(y = "Stand. AResid estimate") +
geom_smooth(method = "lm") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
lm(AResid ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
ggplot(pdpStand2, aes(IMS, AResid, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/AResid") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
ggplot(pbLong, aes(Task, pbStand, fill = Observer)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
dat.cond$Observer = as.character(dat.cond$Observer)
for (i in unique(perfBias$Subject)) {
perfBias$Observer[perfBias$Subject == i] = dat.cond$Observer[dat.cond$TrialType == "WITnumErr_bw" &
dat.cond$Subject == i]
}
# rearrange to long form (just standardized data)
pbLong = select(perfBias, -contains("con"), -contains("perfBias")) %>%
gather(Task,pbStand,2:3)                   # "Task" is what previous column names go into
# "pbStand" is what data points go into
g
ggplot(pbLong, aes(Task, pbStand, fill = Observer)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
head(pdpStand)
ggplot(pdpStand, aes(WIT_MeanC, Observer)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
ggplot(pdpStand, aes(Observer, WIT_MeanC)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
ggplot(pdpStand, aes(Observer, AP_MeanC)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
ggplot(pdpStand, aes(Observer, AP_ADiff)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
ggplot(pdpStand, aes(Observer, WIT_ADiff)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
ggplot(pdpStand, aes(Observer, WIT_AResid)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
ggplot(pdpStand, aes(Observer, AP_AResid)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
#  facet_wrap(~Task*Observer) +
#  ggtitle("Performance bias (P(errors|incon) - P(errors|congruent))") +
#  labs(x = "Task", y = "Performance bias") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
axis.text.x  = element_text(vjust=0.5, size=16, color = "black")
)
