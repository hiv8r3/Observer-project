# rearrange data so it can be plotted
dat1 = select(pdpStand, Subject, contains("MeanC")) %>%
rename(WIT = WIT_MeanC,
AP = AP_MeanC)
dat1$Type = "MeanC"
dat2 = select(pdpStand, Subject, contains("AResid")) %>%
rename(WIT = WIT_AResid,
AP = AP_AResid)
dat2$Type = "AResid"
SSC = rbind(dat1, dat2)
SSC$'Estimate Type'[SSC$Type == "AResid"] = "PDP-A"
SSC$'Estimate Type'[SSC$Type == "MeanC"] = "PDP-C"
SSC$'Estimate Type' = as.factor(SSC$'Estimate Type')
# Figure 2 ----------------------------------------------------------------
# Visualize simple slopes- MeanC + AResid
ggplot(SSC, aes(WIT, AP, pch = `Estimate Type`)) +
geom_point(aes(shape = `Estimate Type`), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
theme_bw() +
geom_smooth(method = "lm", aes(linetype=`Estimate Type`), color = "black") +
labs(x = "PDP estimates for WIT", y = "PDP estimates for APT") +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
legend.title = element_blank(),
legend.key.size = unit(1.2, "cm"))
# Interaction represents whether simple slope of MeanC is different from AResid
lm(WIT ~ AP*Type, data = SSC) %>%
summary()
# Now look at DiffA
dat3 = select(pdpStand, Subject, contains("DiffA")) %>%
rename(WIT = WIT_DiffA,
AP = AP_DiffA)
dat3$Type = "DiffA"
SSC2 = rbind(dat1, dat3)
SSC2$'Estimate Type'[SSC2$Type == "DiffA"] = "PDP-A"
SSC2$'Estimate Type'[SSC2$Type == "MeanC"] = "PDP-C"
SSC2$'Estimate Type' = as.factor(SSC2$'Estimate Type')
# Visualize simple slopes- MeanC + DiffA
ggplot(SSC2, aes(WIT, AP, pch = `Estimate Type`)) +
geom_point(aes(shape = `Estimate Type`), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
theme_bw() +
geom_smooth(method = "lm", aes(linetype=`Estimate Type`), color = "black") +
labs(x = "PDP estimates for WIT", y = "PDP estimates for APT") +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
legend.title = element_blank(),
legend.key.size = unit(1.2, "cm"))
# Interaction represents whether simple slope of MeanC is different from DiffA
lm(WIT ~ AP*Type, data = SSC2) %>%
summary()
lm(WIT ~ AP, data = SSC2[SSC2$Type == "DiffA",]) %>%
summary()
lm(WIT ~ AP, data = SSC2[SSC2$Type == "MeanC",]) %>%
summary()
#######################################################################
######################## Observer x IMS ##############################
######################## multiple regressions ##############################
######################## on perfBias, PDP estimates ##############################
#######################################################################
# rearrange data to half wide/half long form
# columns: Subject, Task, Observer, MeanC, AResid
temp1 = pdpStand[,1:5] %>%    # Takes just WIT data
rename(MeanC = WIT_MeanC,
DiffA = WIT_DiffA,
AResid = WIT_AResid)
temp1$Task = "WIT"
temp2 = rename(pdpStand[,c(1:2, 6:8)],     # Takes just AP data
MeanC = AP_MeanC,
DiffA = AP_DiffA,
AResid = AP_AResid)
temp2$Task = "APT"
# Bind WIT and AP data together
pdpStand2 = rbind(temp1, temp2)
# Add IMS/EMS data
for (i in unique(pdpStand2$Subject)) {
pdpStand2$IMS[pdpStand2$Subject == i] = dat.trial$IMS[dat.trial$Subject == i &
dat.trial$SubTrial == 1 &
dat.trial$blockName == "WIT"]
pdpStand2$EMS[pdpStand2$Subject == i] = dat.trial$EMS[dat.trial$Subject == i &
dat.trial$SubTrial == 1 &
dat.trial$blockName == "WIT"]
pdpStand2$IMS.EMS.diff[pdpStand2$Subject == i] = dat.trial$IMS.EMS.diff[dat.trial$Subject == i &
dat.trial$SubTrial == 1 &
dat.trial$blockName == "WIT"]
}
# Add performance bias data
for (i in unique(pdpStand2$Subject)) {
pdpStand2$perfBias[pdpStand2$Subject == i & pdpStand2$Task == "WIT"] = perfBias$WITperfBias[perfBias$Subject == i]
pdpStand2$perfBias[pdpStand2$Subject == i & pdpStand2$Task == "APT"] = perfBias$APperfBias[perfBias$Subject == i]
}
# Adjust classes of variables
pdpStand2$Subject = factor(pdpStand2$Subject)
pdpStand2$MeanC = as.numeric(pdpStand2$MeanC)
pdpStand2$AResid = as.numeric(pdpStand2$AResid)
pdpStand2$DiffA = as.numeric(pdpStand2$DiffA)
pdpStand2$Task = factor(pdpStand2$Task)
# number of additional subject missing IMS/EMS data
length(unique(pdpStand2$Subject[!(is.na(pdpStand2$IMS))])) # 7 subjects missing (83 total)
length(unique(pdpStand2$Subject[!(is.na(pdpStand2$IMS)) &
pdpStand2$Observer == "Present"])) # 41 subjects
length(unique(pdpStand2$Subject[!(is.na(pdpStand2$IMS)) &
pdpStand2$Observer == "Absent"])) # 42 subjects
# correlation between IMS and EMS: r = .12, p = .262
dat = pdpStand2[!(is.na(pdpStand2$IMS)) & !(is.na(pdpStand2$EMS)) & pdpStand2$Task == "APT",]
lm(scale(IMS) ~ scale(EMS), data = dat) %>%
summary()
########### PERFORMANCE BIAS ################################
# IMS and perfBias separated by observer
ggplot(pdpStand2, aes(IMS, perfBias, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
#  ggtitle("IMS/perfBias") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Performance Bias") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"))
# Looking at three way interaction: IMS*Task*Observer (perfBias)
lm(perfBias ~ scale(IMS)*Observer*Task, data = pdpStand2) %>% # make sure to used standardized IMS to get stand. betas
summary()
# Looking at IMS*Task interaction within each level of observer
lm(perfBias ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
lm(perfBias ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
# EMS and perfBias separated by observer
ggplot(pdpStand2, aes(EMS, perfBias, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
#  ggtitle("EMS/perfBias") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Performance Bias") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"))
lm(perfBias ~ scale(EMS)*Observer*Task, data = pdpStand2) %>%
summary()
lm(perfBias ~ scale(EMS)*Observer, data = pdpStand2[pdpStand2$Task == "APT",]) %>%
summary()
lm(perfBias ~ scale(EMS)*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
# What about IMS-EMS diff score? No effect
lm(perfBias ~ scale(IMS.EMS.diff)*Observer*Task, data = pdpStand2) %>%
summary()
################ CONTROL ESTIMATE ####################
# IMS and MeanC separated by observer
ggplot(pdpStand2, aes(IMS, MeanC, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "PDP-C Estimate") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"))
# Full three way interaction
lm(MeanC ~ scale(IMS)*Observer*Task, data = pdpStand2) %>% # make sure to use standardized IMS to get stand. betas
summary()
# IMS*Task interaction for control within each level of observer
## WIT
lm(MeanC ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
## AP
lm(MeanC ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
# EMS and MeanC separated by observer
ggplot(pdpStand2, aes(EMS, MeanC, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "PDP-C Estimate") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"))
lm(MeanC ~ scale(EMS)*Observer*Task, data = pdpStand2) %>% # make sure to use standardized EMS to get stand. betas
summary()
lm(MeanC ~ scale(EMS)*Observer, data = pdpStand2[pdpStand2$Task == "APT",]) %>%
summary()
lm(MeanC ~ scale(EMS)*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
# What about IMS-EMS diff score? No effect
lm(MeanC ~ scale(IMS.EMS.diff)*Observer*Task, data = pdpStand2) %>% # make sure to use standardized EMS to get stand. betas
summary()
################# BIAS ESTIMATE (AResid) ######################
obs_label <- c(Absent = "Observer Absent", Present = "Observer Present")
# Figure 3 ----------------------------------------------------------------
# IMS and AResid separated by observer
ggplot(pdpStand2, aes(IMS, AResid, pch = Task)) +
geom_point(aes(shape = Task), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
facet_wrap(~Observer, labeller=labeller(Observer = obs_label)) +
geom_smooth(method = "lm", aes(linetype=Task), color = "black") +
labs(y = "PDP-A estimate") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"))
# Full three way interaction
lm(AResid ~ scale(IMS)*Observer*Task, data = pdpStand2) %>% # use standardized IMS to get stand. betas
summary()
# Look at each level of observer separately
## WIT
lm(AResid ~ scale(IMS)*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
## AP
lm(AResid ~ scale(IMS)*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
# Look at each level of observer separately
## WIT
lm(AResid ~ scale(IMS)*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>%
summary()
## AP
lm(AResid ~ scale(IMS)*Observer, data = pdpStand2[pdpStand2$Task == "APT",]) %>%
summary()
# simple slopes
lm(AResid ~ scale(IMS), data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "APT",]) %>%
summary()
lm(AResid ~ scale(IMS), data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "WIT",]) %>%
summary()
# EMS and AResid separated by observer
ggplot(pdpStand2, aes(EMS, AResid, pch = Task)) +
geom_point(aes(shape = Task), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
facet_wrap(~Observer, labeller=labeller(Observer = obs_label)) +
geom_smooth(method = "lm", aes(linetype=Task), color = "black") +
labs(y = "PDP-A estimate") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"))
lm(AResid ~ scale(EMS)*Observer*Task, data = pdpStand2) %>% # use standardized EMS to get stand. betas
summary()
lm(AResid ~ scale(EMS)*Task, data = pdpStand2[pdpStand2$Observer=="Present",]) %>%
summary()
lm(AResid ~ scale(EMS)*Task, data = pdpStand2[pdpStand2$Observer=="Absent",]) %>%
summary()
# What about IMS-EMS diff score?
lm(AResid ~ scale(IMS.EMS.diff)*Observer*Task, data = pdpStand2) %>% # use standardized IMS to get stand. betas
summary()
################# BIAS ESTIMATE (DiffA) ######################
# IMS and AResid separated by observer
ggplot(pdpStand2, aes(IMS, DiffA, pch = Task)) +
geom_point(aes(shape = Task), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
facet_wrap(~Observer, labeller=labeller(Observer = obs_label)) +
geom_smooth(method = "lm", aes(linetype=Task), color = "black") +
labs(y = "PDP-A estimate") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"))
# Full three way interaction
lm(DiffA ~ IMS*Observer*Task, data = pdpStand2) %>%
summary()
# Within Observer Absent
lm(DiffA ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
# Within Observer Present
lm(DiffA ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
# Within Observer Present, simple slope for each task
lm(DiffA ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "APT",]) %>%
summary()
lm(DiffA ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "WIT",]) %>%
summary()
lm(DiffA ~ scale(EMS)*Observer*Task, data = pdpStand2) %>% # use standardized EMS to get stand. betas
summary()
lm(DiffA ~ scale(EMS)*Task, data = pdpStand2[pdpStand2$Observer=="Present",]) %>%
summary()
lm(DiffA ~ scale(EMS)*Task, data = pdpStand2[pdpStand2$Observer=="Absent",]) %>%
summary()
# Investigating post-task questions ---------------------------------------
# Add post-task questions
dat.trial$blockName = as.character(dat.trial$blockName)
dat.trial$blockName[dat.trial$blockName == "AP"] = "APT"
dat.trial$blockName = as.factor(dat.trial$blockName)
for (i in unique(pdpStand2$Subject)) {
for (j in c("WIT", "APT")) {
pdpStand2$Frust[pdpStand2$Subject == i &
pdpStand2$Task == j] = mean(dat.trial$Frust[dat.trial$Subject == i &
dat.trial$blockName == j])
pdpStand2$Anx[pdpStand2$Subject == i &
pdpStand2$Task == j] = mean(dat.trial$Anx[dat.trial$Subject == i &
dat.trial$blockName == j])
pdpStand2$Unpleas[pdpStand2$Subject == i &
pdpStand2$Task == j] = mean(dat.trial$Unpleas[dat.trial$Subject == i &
dat.trial$blockName == j])
pdpStand2$Attend[pdpStand2$Subject == i &
pdpStand2$Task == j] = mean(dat.trial$Attend[dat.trial$Subject == i &
dat.trial$blockName == j])
pdpStand2$Effort[pdpStand2$Subject == i &
pdpStand2$Task == j] = mean(dat.trial$Effort[dat.trial$Subject == i &
dat.trial$blockName == j])
}
}
# correlation between attention and effort
lm(scale(Attend) ~ scale(Effort), data = pdpStand2) %>% summary()
# make average for composite of error-related negative feelings
WIT$Err_comp = (WIT$Frust + WIT$Anx + WIT$Unpleas)/3
APT$Err_comp = (APT$Frust + APT$Anx + APT$Unpleas)/3
pdpStand2$Err_comp = (pdpStand2$Frust + pdpStand2$Anx + pdpStand2$Unpleas)/3
# difference in composite error-related
tapply(WIT$Err_comp, WIT$Observer, mean)
tapply(WIT$Err_comp, WIT$Observer, sd)
tapply(APT$Err_comp, APT$Observer, mean)
tapply(APT$Err_comp, APT$Observer, sd)
tapply(WIT$Anx, WIT$Observer, mean)
tapply(WIT$Anx, WIT$Observer, sd)
tapply(APT$Anx, APT$Observer, mean)
tapply(APT$Anx, APT$Observer, sd)
# Does IMS predict anxiety?
lm(scale(Anx) ~ scale(IMS) * Observer * Task, data = pdpStand2) %>%
summary()
APT = pdpStand2[pdpStand2$Task == "APT",]
lm(scale(Anx) ~ scale(IMS) * Observer, data = APT) %>%
summary()
WIT = pdpStand2[pdpStand2$Task == "WIT",]
lm(scale(Anx) ~ scale(IMS) * Observer, data = WIT) %>%
summary()
# Does IMS predict composite?
lm(scale(Err_comp) ~ scale(IMS), data = pdpStand2) %>%
summary()
lm(scale(Err_comp) ~ scale(IMS) * Observer * Task, data = pdpStand2) %>%
summary()
lm(scale(Err_comp) ~ scale(IMS) * Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
lm(scale(Err_comp) ~ scale(IMS) * Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
# correlation table for post-task questions
cor(APT[,11:15])
cor(WIT[,11:15])
# mean and sd of effort and attend questions
mean(WIT$Attend)
mean(WIT$Effort)
mean(APT$Attend)
mean(APT$Effort)
# alpha of composite
compWIT = pdpStand2[pdpStand2$Task == "WIT",11:13]
compAPT = pdpStand2[pdpStand2$Task == "APT",11:13]
require(psych)
alpha(compWIT)
alpha(compAPT)
# Does anxiety predict PDP-C?
lm(MeanC ~ scale(Anx)*Observer*Task, data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
# Does anxiety predict PDP-A?
lm(AResid ~ scale(Anx)*Observer*Task, data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
lm(AResid ~ scale(Anx)*Observer, data = pdpStand2[pdpStand2$Task == "WIT",]) %>% # use standardized Anx to get stand. betas
summary()
lm(AResid ~ scale(Anx)*Observer, data = pdpStand2[pdpStand2$Task == "APT",]) %>% # use standardized Anx to get stand. betas
summary()
# Does anxiety predict perfBias?
lm(perfBias ~ scale(Anx)*Observer*Task, data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
###
# Does composite predict PDP-C?
lm(MeanC ~ scale(Err_comp)*Observer*Task, data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
lm(MeanC ~ scale(Err_comp), data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
# Does composite predict PDP-A?
lm(AResid ~ scale(Err_comp), data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
lm(AResid ~ scale(Err_comp)*Observer*Task, data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
lm(AResid ~ scale(Err_comp)*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
lm(AResid ~ scale(Err_comp)*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
# Does composite predict perfBias?
lm(perfBias ~ scale(Anx)*Observer*Task, data = pdpStand2) %>% # use standardized Anx to get stand. betas
summary()
# Test IMS -> composite -> PDP-A mediation (separately for observer)
lm(Err_comp ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "WIT",]) %>%
summary()
lm(AResid ~ Err_comp * IMS, data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "WIT",]) %>%
summary()
lm(Err_comp ~ IMS, data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "APT",]) %>%
summary()
lm(AResid ~ Err_comp * IMS, data = pdpStand2[pdpStand2$Observer == "Present" & pdpStand2$Task == "APT",]) %>%
summary()
lm(Err_comp ~ IMS, data = pdpStand2[pdpStand2$Observer == "Absent" & pdpStand2$Task == "WIT",]) %>%
summary()
lm(AResid ~ Err_comp * IMS, data = pdpStand2[pdpStand2$Observer == "Absent" & pdpStand2$Task == "WIT",]) %>%
summary()
lm(Err_comp ~ IMS, data = pdpStand2[pdpStand2$Observer == "Absent" & pdpStand2$Task == "APT",]) %>%
summary()
lm(AResid ~ Err_comp * IMS, data = pdpStand2[pdpStand2$Observer == "Absent" & pdpStand2$Task == "APT",]) %>%
summary()
########## mean RTs for each condition for Table 1 (just correct trials)
WITtrial = dat.trial[dat.trial$Procedure.Block. == "WITproc" & dat.trial$responseAccData == 2,]
WITtrial$Condition = paste(WITtrial$PrimeType, WITtrial$TargetType, sep="_")
tapply(WITtrial$TargetWIT.RT, WITtrial$Condition, mean)
tapply(WITtrial$TargetWIT.RT, WITtrial$Condition, sd)
APTtrial = dat.trial[dat.trial$Procedure.Block. == "APproc" & dat.trial$responseAccData == 2,]
APTtrial$Condition = paste(APTtrial$PrimeType, APTtrial$TargetType, sep="_")
tapply(APTtrial$TargetAP.RT, APTtrial$Condition, mean)
tapply(APTtrial$TargetAP.RT, APTtrial$Condition, sd)
ggplot(dat.cond.nobs, aes(PrimeType, numErr, fill = ConType)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Task, labeller=labeller(Task = facet_labels)) +
#  ggtitle("Total number of errors") +
labs(y = "Number of errors", x = "Race of Prime") +
scale_fill_manual(values=c("black","grey70"), guide = guide_legend(title = NULL)) +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggsave("./Figures/Figure1.png")
ggsave("./Figures/Figure1.png")
??ggsave
ggsave("./Figures/Figure1.tiff", width = 5, height = 3, units = in)
ggsave("./Figures/Figure1.tiff", width = 5, height = 3, units = "in")
ggsave("./Figures/Figure1.tiff", width = 4, height = 3, units = "in")
ggsave("./Figures/Figure1.tiff", width = 5, height = 3.5, units = "cm")
in
ggsave("./Figures/Figure1.tiff", width = 4, height = 3, units = "in")
ggplot(perfBias, aes(APStand, WITStand)) +
geom_point() +
geom_smooth(method = "lm") +
#  ggtitle("Correlation between accuracy on WIT and accuracy on AP") +
labs(x = "Stand. Performance bias on AP", y = "Stand. Performance bias on WIT") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
)
ggplot(SSC, aes(WIT, AP, pch = `Estimate Type`)) +
geom_point(aes(shape = `Estimate Type`), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
theme_bw() +
geom_smooth(method = "lm", aes(linetype=`Estimate Type`), color = "black") +
labs(x = "PDP estimates for WIT", y = "PDP estimates for APT") +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
legend.title = element_blank(),
legend.key.size = unit(1.2, "cm"))
ggsave("./Figures/Figure2.tiff", width = 4, height = 3, units = "in")
ggsave("./Figures/Figure2.tiff")
ggplot(dat.cond.nobs, aes(PrimeType, numErr, fill = ConType)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Task, labeller=labeller(Task = facet_labels)) +
#  ggtitle("Total number of errors") +
labs(y = "Number of errors", x = "Race of Prime") +
scale_fill_manual(values=c("black","grey70"), guide = guide_legend(title = NULL)) +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggsave("./Figures/Figure1.tiff")
ggplot(dat.cond.nobs, aes(PrimeType, numErr, fill = ConType)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Task, labeller=labeller(Task = facet_labels)) +
#  ggtitle("Total number of errors") +
labs(y = "Number of errors", x = "Race of Prime") +
scale_fill_manual(values=c("black","grey70"), guide = guide_legend(title = NULL)) +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggsave("./Figures/Figure1.tiff")
ggplot(pdpStand2, aes(IMS, AResid, pch = Task)) +
geom_point(aes(shape = Task), size = 2.5) +
scale_shape_manual(values=c(1,17)) +
scale_linetype_manual(values=c("solid", "dashed")) +
facet_wrap(~Observer, labeller=labeller(Observer = obs_label)) +
geom_smooth(method = "lm", aes(linetype=Task), color = "black") +
labs(y = "PDP-A estimate") +
theme_bw() +
theme(panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "white"),
strip.text.x = element_text(face = "bold", size = 12),
strip.background = element_rect(fill = "grey98"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.key.size = unit(1, "cm"),
legend.key = element_rect(fill = "white"))
ggsave("./Figures/Figure3.tiff")
