x = dat.cond.AP$numErr[dat.cond.AP$GenType == "black_con" & !is.na(dat.cond.AP$numErr)]
y = dat.cond.AP$numErr[dat.cond.AP$GenType == "black_incon" & !is.na(dat.cond.AP$numErr)]
cohensD(x,y)   # Cohen's D = .33
# Effect size of difference between White positive and negative trials in AP
x = dat.cond.AP$numErr[dat.cond.AP$GenType == "white_con" & !is.na(dat.cond.AP$numErr)]
y = dat.cond.AP$numErr[dat.cond.AP$GenType == "white_incon" & !is.na(dat.cond.AP$numErr)]
cohensD(x,y)   # Cohen's D = .87
# Total number of errors
ggplot(dat.cond.nobs, aes(PrimeType, numErr, fill = ConType)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Task) +
#  ggtitle("Total number of errors") +
labs(y = "Number of errors", x = "Race of Prime") +
scale_fill_manual(values=c("firebrick4","goldenrod1"))+
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
#title = element_text(size=20)
axis.text.x  = element_text(vjust=0.5, size=16, color="black"),
legend.title = element_blank(),
legend.text = element_text(size=16),
strip.text.x = element_text(size = 16, face="bold")
)
#############################################
# calculate performance bias scores (error|incongruent - errors|congruent)
#############################################
perfBias = data.frame("Subject" = unique(dat.cond.nobs$Subject))
# add errors from all congruent trials together, add errors form all incongruent trials together
for (i in unique(perfBias$Subject)) {
perfBias$WITconErrors[perfBias$Subject == i] = dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "black_con" &
dat.cond.nobs$Task == "WIT"] +
dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "white_con" &
dat.cond.nobs$Task == "WIT"]
perfBias$WITinconErrors[perfBias$Subject == i] = dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "black_incon" &
dat.cond.nobs$Task == "WIT"] +
dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "white_incon" &
dat.cond.nobs$Task == "WIT"]
perfBias$APconErrors[perfBias$Subject == i] = dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "black_con" &
dat.cond.nobs$Task == "AP"] +
dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "white_con" &
dat.cond.nobs$Task == "AP"]
perfBias$APinconErrors[perfBias$Subject == i] = dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "black_incon" &
dat.cond.nobs$Task == "AP"] +
dat.cond.nobs$numErr[dat.cond.nobs$Subject == i &
dat.cond.nobs$GenType == "white_incon" &
dat.cond.nobs$Task == "AP"]
}
# create difference score for performance bias estimate
# larger perf bias estimate means more bias (more errors on incongruent trials than congruent trials)
perfBias = mutate(perfBias, WITperfBias = WITinconErrors/96 - WITconErrors/96) %>%
mutate(APperfBias = APinconErrors/96 - APconErrors/96)
# create standardized scores
perfBias$WITStand = scale(perfBias$WITperfBias)
perfBias$APStand = scale(perfBias$APperfBias)
# readjust subject factor levels, change standardized scores to numeric
perfBias$Subject = factor(perfBias$Subject)
perfBias$WITStand = as.numeric(perfBias$WITStand)
perfBias$APStand = as.numeric(perfBias$APStand)
# Look at correlation between tasks
ggplot(perfBias, aes(APStand, WITStand)) +
geom_point() +
geom_smooth(method = "lm") +
#  ggtitle("Correlation between accuracy on WIT and accuracy on AP") +
labs(x = "Stand. Performance bias on AP", y = "Stand. Performance bias on WIT") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
)
lm(APStand ~ WITStand, data = perfBias) %>%
summary()
#######################################################################
######################## PDP analyses ##############################
#######################################################################
# read in PDP estimates for both tasks
longWIT = read.delim("PDPestimatesWITlong.txt")
longAP = read.delim("PDPestimatesAPlong.txt")
# make separate data sets for estimates that separate by race
# WIT
longWITsep = longWIT[!(longWIT$Type == "PDPbiasDiff"),]
longWITsep = longWITsep[grep("White|Black", longWITsep$Type),]
# correct factor levels for Type
longWITsep$Type = factor(longWITsep$Type)
# AP
longAPsep = longAP[!(longAP$Type == "PDPbiasDiff"),]
longAPsep = longAPsep[grep("White|Black", longAPsep$Type),]
# correct factor levels for Type
longAPsep$Type = factor(longAPsep$Type)
# make Subject a factor in order to do anovas
longWIT$Subject = as.factor(longWIT$Subject)
longAP$Subject = as.factor(longAP$Subject)
longWITsep$Subject = as.factor(longWITsep$Subject)
longAPsep$Subject = as.factor(longAPsep$Subject)
# 1. Look at comparison of means of estimates across race of prime within each task
# pairwise comparison of Black_A and White_A in WIT
aov(value ~ PrimeType + Error(Subject/(PrimeType)), data = longWITsep[longWITsep$Estimate == "A",]) %>%
summary()
# partial eta-squared = .05
.1116/(.1116+1.9319)
# pairwise comparison of Black_C and White_C in WIT
aov(value ~ PrimeType + Error(Subject/(PrimeType)), data = longWITsep[longWITsep$Estimate == "C",]) %>%
summary()
# partial eta-squared = .039
.0369/(.0369+.8935)
# pairwise comparison of Black_A and White_A in AP
aov(value ~ PrimeType + Error(Subject/(PrimeType)), data = longAPsep[longAPsep$Estimate == "A",]) %>%
summary()
# partial eta-squared = .007
.0111/(.0111+1.6813)
# pairwise comparison of Black_C and White_C in AP
aov(value ~ PrimeType + Error(Subject/(PrimeType)), data = longAPsep[longAPsep$Estimate == "C",]) %>%
summary()
# partial eta-squared = .13
.1355/(.1355+.8864)
# means
print(model.tables(aov(value ~ PrimeType*Estimate + Error(Subject/(PrimeType)), data = longAPsep),
"means"),se = TRUE, digits=3)
# means
print(model.tables(aov(value ~ PrimeType*Estimate + Error(Subject/(PrimeType)), data = longWITsep),
"means"),se = TRUE, digits=3)
# standard deviations
sd(longAPsep$value[longAPsep$PrimeType == "White" &
longAPsep$Estimate == "C"], na.rm = T)
# standard deviations
sd(longWITsep$value[longWITsep$PrimeType == "Black" &
longWITsep$Estimate == "C"], na.rm = T)
# 2. Look at comparisons across tasks
# need to make data set with subjects that have both task data
wideWIT = read.delim("PDPestimatesWITwide.txt")
wideAP = read.delim("PDPestimatesAPwide.txt")
pdpBoth = select(wideWIT, c(Subject, Observer, Black_C, Black_A, White_C, White_A, MeanC, AResids, CResids)) %>%
rename(        WIT_BlackC = Black_C,
WIT_BlackA = Black_A,
WIT_WhiteA = White_A,
WIT_WhiteC = White_C,
WIT_MeanC = MeanC,
WIT_AResid = AResids,
WIT_CResid = CResids)
pdpBoth = pdpBoth[pdpBoth$Subject %in% wideAP$Subject,] %>%
left_join(select(wideAP, c(Subject, Observer, Black_C, Black_A, White_C, White_A, MeanC, AResids, CResids)), by = "Subject")
pdpBoth = rename(pdpBoth,
AP_BlackC = Black_C,
AP_BlackA = Black_A,
AP_WhiteA = White_A,
AP_WhiteC = White_C,
AP_MeanC = MeanC,
AP_AResid = AResids,
AP_CResid = CResids,
Observer = Observer.x) %>%
select(-Observer.y)
# make standardized PDP estimates
pdpStand = pdpBoth[,1:2]  # make new data.frame, just bring in subject numbers and observer condition
# add standardized estimates for MeanC and AResid for each task
pdpStand$WIT_MeanC = scale(pdpBoth$WIT_MeanC)   # scale() is equivalent to (x-mean(x))/sd(x)
pdpStand$WIT_AResid = scale(pdpBoth$WIT_AResid)
pdpStand$WIT_CResid = scale(pdpBoth$WIT_CResid)
pdpStand$AP_MeanC = scale(pdpBoth$AP_MeanC)
pdpStand$AP_AResid = scale(pdpBoth$AP_AResid)
pdpStand$AP_CResid = scale(pdpBoth$AP_CResid)
# look at correlations of estimates between tasks - Mean C
ggplot(pdpStand, aes(WIT_MeanC, AP_MeanC)) +
geom_point() +
ggtitle("Mean C estimate for WIT/AP (Stand data)") +
geom_smooth(method = "lm") +
labs(x = "Standardized Mean C for WIT", y = "Standardized Mean C for AP") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
)
lm(AP_MeanC ~ WIT_MeanC, data = pdpStand) %>%
summary()
# look at correlations of estimates between tasks - AResid
ggplot(pdpStand, aes(WIT_AResid, AP_AResid)) +
geom_point() +
ggtitle("AResid estimate for WIT/AP (Stand)") +
geom_smooth(method = "lm") +
labs(x = "Standardized AResid for WIT", y = "Standardized AResid for AP") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
)
lm(WIT_AResid ~ AP_AResid, data = pdpStand) %>%
summary()
# look at correlations of estimates between tasks - CResid               # NOT CORRELATED AT ALL
ggplot(pdpStand, aes(WIT_CResid, AP_CResid)) +
geom_point() +
ggtitle("CResid estimate for WIT/AP (Stand data)") +
geom_smooth(method = "lm") +
labs(x = "Standardized CResid for WIT", y = "Standardized CResid for AP") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
)
lm(AP_CResid ~ WIT_CResid, data = pdpStand) %>%
summary()
# 3. Compare simple slopes of Mean C correlation and AResid correlation
# rearrange data so it can be plotted
dat1 = select(pdpStand, Subject, contains("MeanC")) %>%
rename(WIT = WIT_MeanC,
AP = AP_MeanC)
dat1$Type = "MeanC"
dat2 = select(pdpStand, Subject, contains("AResid")) %>%
rename(WIT = WIT_AResid,
AP = AP_AResid)
dat2$Type = "AResid"
SSC = rbind(dat1, dat2)
SSC$Type = factor(SSC$Type)
# Visualize simple slopes- MeanC + AResid
ggplot(SSC, aes(WIT, AP, fill = Type, col = Type, pch = Type)) +
geom_point() +
ggtitle("Correlations across tasks for task control and auto estimates") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
legend.text = element_text(size = 16)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
) +
geom_smooth(method = "lm")
# Interaction represents whether simple slope of MeanC is different from AResid
lm(WIT ~ AP*Type, data = SSC) %>%
summary()
# Look at CResid
dat3 = select(pdpStand, Subject, contains("CResid")) %>%
rename(WIT = WIT_CResid,
AP = AP_CResid)
dat3$Type = "CResid"
SSC2 = rbind(dat2, dat3)
# Visualize simple slopes- CResid + AResid                    # larger slope for A than C, not significant
ggplot(SSC2, aes(WIT, AP, fill = Type, col = Type, pch = Type)) +
geom_point() +
ggtitle("Correlations across tasks for task control and auto estimates") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=20),
axis.title.y = element_text(face="bold", colour="#990000", size=20),
title = element_text(size=20),
legend.text = element_text(size = 16)
#axis.text.x  = element_text(angle=90, vjust=0.5, size=16)
) +
geom_smooth(method = "lm")
# Interaction represents whether simple slope of CResid is different from AResid
lm(WIT ~ AP*Type, data = SSC2) %>%
summary()
#######################################################################
######################## Observer x IMS ##############################
######################## multiple regressions ##############################
######################## on perfBias, PDP estimates ##############################
#######################################################################
# rearrange data to half wide/half long form
# columns: Subject, Task, Observer, MeanC, AResid
temp1 = pdpStand[,1:5] %>%    # Takes just WIT data
rename(MeanC = WIT_MeanC,
CResid = WIT_CResid,
AResid = WIT_AResid)
temp1$Task = "WIT"
temp2 = rename(pdpStand[,c(1:2, 6:8)],     # Takes just AP data
MeanC = AP_MeanC,
CResid = AP_CResid,
AResid = AP_AResid)
temp2$Task = "AP"
# Bind WIT and AP data together
pdpStand2 = rbind(temp1, temp2)
# Add IMS/EMS data and anxiety scores
for (i in unique(pdpStand2$Subject)) {
pdpStand2$IMS[pdpStand2$Subject == i] = dat.trial$IMS[dat.trial$Subject == i &
dat.trial$SubTrial == 1 &
dat.trial$blockName == "WIT"]
pdpStand2$EMS[pdpStand2$Subject == i] = dat.trial$EMS[dat.trial$Subject == i &
dat.trial$SubTrial == 1 &
dat.trial$blockName == "WIT"]
pdpStand2$Anx[pdpStand2$Subject == i] = dat.trial$Anx[dat.trial$Subject == i &
dat.trial$SubTrial == 1 &
dat.trial$blockName == "WIT"]
}
# Add performance bias data
for (i in unique(pdpStand2$Subject)) {
pdpStand2$perfBias[pdpStand2$Subject == i & pdpStand2$Task == "WIT"] = perfBias$WITperfBias[perfBias$Subject == i]
pdpStand2$perfBias[pdpStand2$Subject == i & pdpStand2$Task == "AP"] = perfBias$APperfBias[perfBias$Subject == i]
}
# Adjust classes of variables
pdpStand2$Subject = factor(pdpStand2$Subject)
pdpStand2$MeanC = as.numeric(pdpStand2$MeanC)
pdpStand2$AResid = as.numeric(pdpStand2$AResid)
pdpStand2$CResid = as.numeric(pdpStand2$CResid)
pdpStand2$Task = factor(pdpStand2$Task)
# number of additional subject missing IMS/EMS data
length(unique(pdpStand2$Subject[!(is.na(pdpStand2$IMS))])) # 7 subjects missing (83 total)
length(unique(pdpStand2$Subject[!(is.na(pdpStand2$IMS)) &
pdpStand2$Observer == "Present"])) # 41 subjects
length(unique(pdpStand2$Subject[!(is.na(pdpStand2$IMS)) &
pdpStand2$Observer == "Absent"])) # 42 subjects
# correlation between IMS and EMS: r = .12
dat = pdpStand2[!(is.na(pdpStand2$IMS)) & !(is.na(pdpStand2$EMS)) & pdpStand2$Task == "AP",]
cor(dat$IMS, dat$EMS)
########### PERFORMANCE BIAS ################################
# IMS and perfBias separated by observer
ggplot(pdpStand2, aes(IMS, perfBias, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/perfBias") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. perfBias estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
# Looking at three way interaction: IMS*Task*Observer (perfBias)
lm(perfBias ~ IMS*Observer*Task, data = pdpStand2) %>%
summary()
# Looking at IMS*Task interaction within each level of observer
lm(perfBias ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
lm(perfBias ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
################ CONTROL ESTIMATE ####################
# IMS and MeanC separated by observer
ggplot(pdpStand2, aes(IMS, MeanC, fill = Observer, col = Observer, pch = Observer)) +
geom_point() +
ggtitle("IMS/MeanC") +
facet_wrap(~Task) +
geom_smooth(method = "lm") +
labs(y = "Stand. MeanC estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
# Full three way interaction
lm(MeanC ~ IMS*Observer*Task, data = pdpStand2) %>%
summary()
# IMS*Task interaction for control within each level of observer
## WIT
lm(MeanC ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Present",]) %>%
summary()
## AP
lm(MeanC ~ IMS*Task, data = pdpStand2[pdpStand2$Observer == "Absent",]) %>%
summary()
################# BIAS ESTIMATE ######################
# IMS and AResid separated by observer
ggplot(pdpStand2, aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("IMS/AResid") +
facet_wrap(~Observer) +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
head(pdpStand2)
ggplot(pdpStand2[pdpStand2$Observer = "Absent"], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("IMS/AResid") +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
??geom_point
ggplot(pdpStand2[pdpStand2$Observer = "Absent"], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point()
pdpStand2[pdpStand2$Observer = "Absent"]
ggplot(pdpStand2[pdpStand2$Observer == "Absent"], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point()
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point()
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("IMS/AResid") +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme(axis.title.x = element_text(face="bold", colour="#990000", size=28),
axis.title.y = element_text(face="bold", colour="#990000", size=28),
plot.title = element_text(size=28, vjust = 2, color = "white"),
plot.background = element_rect(fill = "black"),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
strip.text = element_text(size=24)
)
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("IMS/AResid") +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme_apa()
)
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("IMS/AResid") +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme_apa()
)
??theme_apa
?theme_apa
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("IMS/AResid") +
geom_smooth(method = "lm") +
labs(y = "Stand. AResid estimate") +
theme_bw()
)
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer absent") +
geom_smooth(method = "lm") +
labs(y = "PDP estimate of automatic processing") +
theme_bw()
)
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer absent") +
geom_smooth(method = "lm") +
labs(y = "PDP estimate of automatic processing") +
theme_bw(axis.title.x = element_text(face="bold", size=28),
axis.title.y = element_text(face="bold", size=28),
plot.title = element_text(size=28, vjust = 2),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer absent") +
geom_smooth(method = "lm") +
labs(y = "PDP estimate of automatic processing") +
theme(axis.title.x = element_text(face="bold", size=28),
axis.title.y = element_text(face="bold", size=28),
plot.title = element_text(size=28, vjust = 2),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
ggplot(pdpStand2[pdpStand2$Observer == "Absent",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer absent") +
geom_smooth(method = "lm") +
labs(y = "PDP auto estimate") +
theme(axis.title.x = element_text(face="bold", size=28),
axis.title.y = element_text(face="bold", size=28),
plot.title = element_text(size=28, vjust = 2),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
ggplot(pdpStand2[pdpStand2$Observer == "Present",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present") +
geom_smooth(method = "lm") +
labs(y = "PDP auto estimate") +
theme(axis.title.x = element_text(face="bold", size=28),
axis.title.y = element_text(face="bold", size=28),
plot.title = element_text(size=28, vjust = 2),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16)
)
ggplot(pdpStand2[pdpStand2$Observer == "Present",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present") +
geom_smooth(method = "lm") +
labs(y = "PDP auto estimate") +
theme(axis.title.x = element_text(face="bold", size=28),
axis.title.y = element_text(face="bold", size=28),
plot.title = element_text(size=28, vjust = 2),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
plot.background = element_rect()
)
ggplot(pdpStand2[pdpStand2$Observer == "Present",], aes(IMS, AResid, fill = Task, col = Task, pch = Task)) +
geom_point() +
ggtitle("Observer present") +
geom_smooth(method = "lm") +
labs(y = "PDP auto estimate") +
theme(axis.title.x = element_text(face="bold", size=28),
axis.title.y = element_text(face="bold", size=28),
plot.title = element_text(size=28, vjust = 2),
axis.text.x  = element_text(vjust=0.5, size=16),
legend.title = element_text(size=16),
legend.text = element_text(size=16),
plot.background = element_rect(line = "dashed")
)
